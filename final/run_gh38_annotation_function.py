import gzip
import numpy as np

GENOME_LENGTH = 6198822410

CHROMOSOME_TO_INT_GH38 = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11,
                          '12': 12, '13': 13, '14': 14, '15': 15, '16': 16, '17': 17, '18': 18, '19': 19, '20': 20,
                          '21': 21, '22': 22, 'X': 23, 'Y': 24, 'MT': 25, 'GL000008.2': 26, 'GL000009.2': 27,
                          'GL000194.1': 28, 'GL000195.1': 29, 'GL000205.2': 30, 'GL000208.1': 31, 'GL000213.1': 32,
                          'GL000214.1': 33, 'GL000216.2': 34, 'GL000218.1': 35, 'GL000219.1': 36, 'GL000220.1': 37,
                          'GL000221.1': 38, 'GL000224.1': 39, 'GL000225.1': 40, 'GL000226.1': 41, 'KI270302.1': 42,
                          'KI270303.1': 43, 'KI270304.1': 44, 'KI270305.1': 45, 'KI270310.1': 46, 'KI270311.1': 47,
                          'KI270312.1': 48, 'KI270315.1': 49, 'KI270316.1': 50, 'KI270317.1': 51, 'KI270320.1': 52,
                          'KI270322.1': 53, 'KI270329.1': 54, 'KI270330.1': 55, 'KI270333.1': 56, 'KI270334.1': 57,
                          'KI270335.1': 58, 'KI270336.1': 59, 'KI270337.1': 60, 'KI270338.1': 61, 'KI270340.1': 62,
                          'KI270362.1': 63, 'KI270363.1': 64, 'KI270364.1': 65, 'KI270366.1': 66, 'KI270371.1': 67,
                          'KI270372.1': 68, 'KI270373.1': 69, 'KI270374.1': 70, 'KI270375.1': 71, 'KI270376.1': 72,
                          'KI270378.1': 73, 'KI270379.1': 74, 'KI270381.1': 75, 'KI270382.1': 76, 'KI270383.1': 77,
                          'KI270384.1': 78, 'KI270385.1': 79, 'KI270386.1': 80, 'KI270387.1': 81, 'KI270388.1': 82,
                          'KI270389.1': 83, 'KI270390.1': 84, 'KI270391.1': 85, 'KI270392.1': 86, 'KI270393.1': 87,
                          'KI270394.1': 88, 'KI270395.1': 89, 'KI270396.1': 90, 'KI270411.1': 91, 'KI270412.1': 92,
                          'KI270414.1': 93, 'KI270417.1': 94, 'KI270418.1': 95, 'KI270419.1': 96, 'KI270420.1': 97,
                          'KI270422.1': 98, 'KI270423.1': 99, 'KI270424.1': 100, 'KI270425.1': 101, 'KI270429.1': 102,
                          'KI270435.1': 103, 'KI270438.1': 104, 'KI270442.1': 105, 'KI270448.1': 106, 'KI270465.1': 107,
                          'KI270466.1': 108, 'KI270467.1': 109, 'KI270468.1': 110, 'KI270507.1': 111, 'KI270508.1': 112,
                          'KI270509.1': 113, 'KI270510.1': 114, 'KI270511.1': 115, 'KI270512.1': 116, 'KI270515.1': 117,
                          'KI270516.1': 118, 'KI270517.1': 119, 'KI270518.1': 120, 'KI270519.1': 121, 'KI270521.1': 122,
                          'KI270522.1': 123, 'KI270528.1': 124, 'KI270529.1': 125, 'KI270530.1': 126, 'KI270538.1': 127,
                          'KI270539.1': 128, 'KI270544.1': 129, 'KI270548.1': 130, 'KI270579.1': 131, 'KI270580.1': 132,
                          'KI270581.1': 133, 'KI270582.1': 134, 'KI270583.1': 135, 'KI270584.1': 136, 'KI270587.1': 137,
                          'KI270588.1': 138, 'KI270589.1': 139, 'KI270590.1': 140, 'KI270591.1': 141, 'KI270593.1': 142,
                          'KI270706.1': 143, 'KI270707.1': 144, 'KI270708.1': 145, 'KI270709.1': 146, 'KI270710.1': 147,
                          'KI270711.1': 148, 'KI270712.1': 149, 'KI270713.1': 150, 'KI270714.1': 151, 'KI270715.1': 152,
                          'KI270716.1': 153, 'KI270717.1': 154, 'KI270718.1': 155, 'KI270719.1': 156, 'KI270720.1': 157,
                          'KI270721.1': 158, 'KI270722.1': 159, 'KI270723.1': 160, 'KI270724.1': 161, 'KI270725.1': 162,
                          'KI270726.1': 163, 'KI270727.1': 164, 'KI270728.1': 165, 'KI270729.1': 166, 'KI270730.1': 167,
                          'KI270731.1': 168, 'KI270732.1': 169, 'KI270733.1': 170, 'KI270734.1': 171, 'KI270735.1': 172,
                          'KI270736.1': 173, 'KI270737.1': 174, 'KI270738.1': 175, 'KI270739.1': 176, 'KI270740.1': 177,
                          'KI270741.1': 178, 'KI270742.1': 179, 'KI270743.1': 180, 'KI270744.1': 181, 'KI270745.1': 182,
                          'KI270746.1': 183, 'KI270747.1': 184, 'KI270748.1': 185, 'KI270749.1': 186, 'KI270750.1': 187,
                          'KI270751.1': 188, 'KI270752.1': 189, 'KI270753.1': 190, 'KI270754.1': 191, 'KI270755.1': 192,
                          'KI270756.1': 193, 'KI270757.1': 194}
PARTIAL_SUMS_GH38 = [0, 248956422, 491149951, 689445510, 879660065, 1061198324, 1232004303, 1391350276, 1536488912,
                     1674883629, 1808681051, 1943767673, 2077042982, 2191407310, 2298451028, 2400442217, 2490780562,
                     2574038003, 2654411288, 2713028904, 2777473071, 2824183054, 2875001522, 3031042417, 3087930319,
                     3087946888, 3088156597, 3088358306, 3088549775, 3088732671, 3088918262, 3089010951, 3089175190,
                     3089312908, 3089489516, 3089650663, 3089829861, 3089991663, 3090147060, 3090326753, 3090537926,
                     3090552934, 3090555208, 3090557150, 3090559315, 3090560787, 3090561988, 3090574387, 3090575385,
                     3090577661, 3090579105, 3090616795, 3090621211, 3090642687, 3090643727, 3090645379, 3090648078,
                     3090649446, 3090650494, 3090651520, 3090652641, 3090654069, 3090655497, 3090659027, 3090660830,
                     3090663685, 3090672005, 3090674810, 3090676460, 3090677911, 3090680567, 3090682945, 3090684081,
                     3090685129, 3090686174, 3090688104, 3090692319, 3090694069, 3090695727, 3090696717, 3090698505,
                     3090700042, 3090701258, 3090702556, 3090704943, 3090706427, 3090707398, 3090708706, 3090709676,
                     3090710819, 3090712699, 3090715345, 3090716524, 3090719013, 3090721056, 3090723201, 3090724230,
                     3090726551, 3090727996, 3090728977, 3090731117, 3090733001, 3090734362, 3090827345, 3090939850,
                     3091331911, 3091339903, 3091341677, 3091342910, 3091346830, 3091350885, 3091356238, 3091358189,
                     3091360507, 3091362922, 3091371049, 3091393738, 3091400099, 3091401399, 3091404652, 3091406838,
                     3091544964, 3091552606, 3091558280, 3091561263, 3091563162, 3091565330, 3091656639, 3091657632,
                     3091658834, 3091660433, 3091691466, 3091693019, 3091700065, 3091706569, 3091707969, 3091712482,
                     3091715451, 3091721609, 3091766083, 3091770768, 3091776564, 3091779605, 3091954660, 3091986692,
                     3092114374, 3092181234, 3092221410, 3092263620, 3092439663, 3092480408, 3092522125, 3092683596,
                     3092837395, 3092877457, 3092915511, 3093092356, 3093131406, 3093231722, 3093425772, 3093463887,
                     3093503442, 3093676252, 3093719991, 3094168239, 3096040998, 3096321837, 3096434388, 3096585142,
                     3096626685, 3096806457, 3096971507, 3097014318, 3097196238, 3097300076, 3097399451, 3097473436,
                     3097510676, 3097668108, 3097854847, 3098065505, 3098233977, 3098275868, 3098342354, 3098541089,
                     3098634410, 3098793169, 3098942019, 3099092761, 3099120506, 3099183450, 3099223641, 3099260364,
                     3099339954, 3099411205, 3348367627, 3590561156, 3788856715, 3979071270, 4160609529, 4331415508,
                     4490761481, 4635900117, 4774294834, 4908092256, 5043178878, 5176454187, 5290818515, 5397862233,
                     5499853422, 5590191767, 5673449208, 5753822493, 5812440109, 5876884276, 5923594259, 5974412727,
                     6130453622, 6187341524, 6187358093, 6187567802, 6187769511, 6187960980, 6188143876, 6188329467,
                     6188422156, 6188586395, 6188724113, 6188900721, 6189061868, 6189241066, 6189402868, 6189558265,
                     6189737958, 6189949131, 6189964139, 6189966413, 6189968355, 6189970520, 6189971992, 6189973193,
                     6189985592, 6189986590, 6189988866, 6189990310, 6190028000, 6190032416, 6190053892, 6190054932,
                     6190056584, 6190059283, 6190060651, 6190061699, 6190062725, 6190063846, 6190065274, 6190066702,
                     6190070232, 6190072035, 6190074890, 6190083210, 6190086015, 6190087665, 6190089116, 6190091772,
                     6190094150, 6190095286, 6190096334, 6190097379, 6190099309, 6190103524, 6190105274, 6190106932,
                     6190107922, 6190109710, 6190111247, 6190112463, 6190113761, 6190116148, 6190117632, 6190118603,
                     6190119911, 6190120881, 6190122024, 6190123904, 6190126550, 6190127729, 6190130218, 6190132261,
                     6190134406, 6190135435, 6190137756, 6190139201, 6190140182, 6190142322, 6190144206, 6190145567,
                     6190238550, 6190351055, 6190743116, 6190751108, 6190752882, 6190754115, 6190758035, 6190762090,
                     6190767443, 6190769394, 6190771712, 6190774127, 6190782254, 6190804943, 6190811304, 6190812604,
                     6190815857, 6190818043, 6190956169, 6190963811, 6190969485, 6190972468, 6190974367, 6190976535,
                     6191067844, 6191068837, 6191070039, 6191071638, 6191102671, 6191104224, 6191111270, 6191117774,
                     6191119174, 6191123687, 6191126656, 6191132814, 6191177288, 6191181973, 6191187769, 6191190810,
                     6191365865, 6191397897, 6191525579, 6191592439, 6191632615, 6191674825, 6191850868, 6191891613,
                     6191933330, 6192094801, 6192248600, 6192288662, 6192326716, 6192503561, 6192542611, 6192642927,
                     6192836977, 6192875092, 6192914647, 6193087457, 6193131196, 6193579444, 6195452203, 6195733042,
                     6195845593, 6195996347, 6196037890, 6196217662, 6196382712, 6196425523, 6196607443, 6196711281,
                     6196810656, 6196884641, 6196921881, 6197079313, 6197266052, 6197476710, 6197645182, 6197687073,
                     6197753559, 6197952294, 6198045615, 6198204374, 6198353224, 6198503966, 6198531711, 6198594655,
                     6198634846, 6198671569, 6198751159, 6198822410]
CLASSIFICATIONS_ORDER_GH38 = {'scaffold': 24, 'pseudogene': 23, 'lnc_RNA': 22, 'ncRNA': 21,
                              'unconfirmed_transcript': 20, 'V_gene_segment': 19, 'biological_region': 18, 'snRNA': 17,
                              'D_gene_segment': 16, 'five_prime_UTR': 15, 'pseudogenic_transcript': 14, 'gene': 13,
                              'mRNA': 12, 'scRNA': 11, 'snoRNA': 10, 'tRNA': 9, 'J_gene_segment': 8, 'ncRNA_gene': 7,
                              'exon': 6, 'rRNA': 5, 'miRNA': 4, 'three_prime_UTR': 3, 'transcript': 2,
                              'C_gene_segment': 1, 'CDS': 0}

GH38_RAW_PATH = None # Should override before use
CLASSIFICATIONS_DB_PATH = None # Should override before use


def init_classifications_db():
    db = np.zeros(GENOME_LENGTH, dtype = np.uintc) # Gh38
    with gzip.open(GH38_RAW_PATH, 'rt') as f:
        for row in f:
            if not row.startswith('#'):
                fields = row.strip().split('\t')
                seg_type = fields[2]
                if fields[2] != 'chromosome':
                    chromosome = CHROMOSOME_TO_INT_GH38[fields[0]]
                    start_pos = int(fields[3])
                    end_pos = int(fields[4])
                    strand = fields[6]
                    if strand == '+':
                        index = PARTIAL_SUMS_GH38[chromosome-1]
                        db[index+start_pos-1: index+end_pos] |= 2 ** CLASSIFICATIONS_ORDER_GH38[seg_type]
                    elif strand == '-':
                        index = PARTIAL_SUMS_GH38[chromosome+193]
                        db[index+start_pos-1: index+end_pos] |= 2 ** CLASSIFICATIONS_ORDER_GH38[seg_type]
                    else:
                        index1 = PARTIAL_SUMS_GH38[chromosome-1]
                        index2 = PARTIAL_SUMS_GH38[chromosome+193]
                        db[index1+start_pos-1: index1+end_pos] |= 2**CLASSIFICATIONS_ORDER_GH38[seg_type]
                        db[index2+start_pos-1 :index2+end_pos] |= 2 ** CLASSIFICATIONS_ORDER_GH38[seg_type]

    f.close()
    return db


def main():
    """
    Creates classifications DB from the gff file, and saves it to a file.
    """
    db = init_classifications_db()
    np.save(CLASSIFICATIONS_DB_PATH, db)


def decode_strand(flag: int) -> str:
    """
    Receives sample's BAM FLAG.
    :return: sample's strand: '+' OR '-' based on:
            BAM flag: 0x10	SEQ being reverse complemented
    """
    strand_mask = 0b00010000
    reverse = int(bin(flag), 2) & strand_mask
    return '+' if reverse == 0 else '-'


def match_classifications(db, chromosome: int, start_pos: int, end_pos: int, flag: int) -> list:
    """
    Receives a sample and a DB.
    :return: a 25-long list where each classification is set to 1 if the sample within it and 0 if not.
    The classifications order: ['scaffold', 'pseudogene', 'lnc_RNA', 'ncRNA', 'unconfirmed_transcript',
                                'V_gene_segment', 'biological_region', 'snRNA', 'D_gene_segment', 'five_prime_UTR',
                                'pseudogenic_transcript', 'gene', 'mRNA', 'scRNA', 'snoRNA', 'tRNA', 'J_gene_segment',
                                'ncRNA_gene', 'exon', 'rRNA', 'miRNA', 'three_prime_UTR', 'transcript',
                                'C_gene_segment', 'CDS']

    """
    strand = decode_strand(flag)
    index = PARTIAL_SUMS_GH38[chromosome-1] if strand == '+' else PARTIAL_SUMS_GH38[chromosome+193]
    res = np.bitwise_or.reduce(db[index+start_pos-1 :index+end_pos])

    return np.unpackbits(np.array([res], dtype='>i4').view(np.uint8))[-25:].tolist()
